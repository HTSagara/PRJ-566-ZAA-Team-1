{"version":3,"file":"index.js","sources":["../../../src/predicates/index.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ModelPredicateCreator = exports.Predicates = exports.PredicateAll = exports.comparisonKeys = exports.isPredicatesAll = exports.ModelSortPredicateCreator = void 0;\nconst util_1 = require(\"../util\");\nvar sort_1 = require(\"./sort\");\nObject.defineProperty(exports, \"ModelSortPredicateCreator\", { enumerable: true, get: function () { return sort_1.ModelSortPredicateCreator; } });\nconst predicatesAllSet = new WeakSet();\nfunction isPredicatesAll(predicate) {\n    return predicatesAllSet.has(predicate);\n}\nexports.isPredicatesAll = isPredicatesAll;\n/**\n * The valid logical grouping keys for a predicate group.\n */\nconst groupKeys = new Set(['and', 'or', 'not']);\n/**\n * Determines whether an object is a GraphQL style predicate \"group\", which must be an\n * object containing a single \"group key\", which then contains the child condition(s).\n *\n * E.g.,\n *\n * ```\n * { and: [ ... ] }\n * { not: { ... } }\n * ```\n *\n * @param o The object to test.\n */\nconst isGroup = o => {\n    const keys = [...Object.keys(o)];\n    return keys.length === 1 && groupKeys.has(keys[0]);\n};\n/**\n * Determines whether an object specifies no conditions and should match everything,\n * as would be the case with `Predicates.ALL`.\n *\n * @param o The object to test.\n */\nconst isEmpty = o => {\n    return !Array.isArray(o) && Object.keys(o).length === 0;\n};\n/**\n * The valid comparison operators that can be used as keys in a predicate comparison object.\n */\nexports.comparisonKeys = new Set([\n    'eq',\n    'ne',\n    'gt',\n    'lt',\n    'ge',\n    'le',\n    'contains',\n    'notContains',\n    'beginsWith',\n    'between',\n]);\n/**\n * Determines whether an object is a GraphQL style predicate comparison node, which must\n * be an object containing a single \"comparison operator\" key, which then contains the\n * operand or operands to compare against.\n *\n * @param o The object to test.\n */\nconst isComparison = o => {\n    const keys = [...Object.keys(o)];\n    return !Array.isArray(o) && keys.length === 1 && exports.comparisonKeys.has(keys[0]);\n};\n/**\n * A light check to determine whether an object is a valid GraphQL Condition AST.\n *\n * @param o The object to test.\n */\nconst isValid = o => {\n    if (Array.isArray(o)) {\n        return o.every(v => isValid(v));\n    }\n    else {\n        return Object.keys(o).length <= 1;\n    }\n};\n// This symbol is not used at runtime, only its type (unique symbol)\nexports.PredicateAll = Symbol('A predicate that matches all records');\nclass Predicates {\n    static get ALL() {\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        const predicate = (c => c);\n        predicatesAllSet.add(predicate);\n        return predicate;\n    }\n}\nexports.Predicates = Predicates;\nclass ModelPredicateCreator {\n    /**\n     * Determines whether the given storage predicate (lookup key) is a predicate\n     * key that DataStore recognizes.\n     *\n     * @param predicate The storage predicate (lookup key) to test.\n     */\n    static isValidPredicate(predicate) {\n        return ModelPredicateCreator.predicateGroupsMap.has(predicate);\n    }\n    /**\n     * Looks for the storage predicate AST that corresponds to a given storage\n     * predicate key.\n     *\n     * The key must have been created internally by a DataStore utility\n     * method, such as `ModelPredicate.createFromAST()`.\n     *\n     * @param predicate The predicate reference to look up.\n     * @param throwOnInvalid Whether to throw an exception if the predicate\n     * isn't a valid DataStore predicate.\n     */\n    static getPredicates(predicate, throwOnInvalid = true) {\n        if (throwOnInvalid && !ModelPredicateCreator.isValidPredicate(predicate)) {\n            throw new Error('The predicate is not valid');\n        }\n        return ModelPredicateCreator.predicateGroupsMap.get(predicate);\n    }\n    /**\n     * using the PK values from the given `model` (which can be a partial of T\n     * Creates a predicate that matches an instance described by `modelDefinition`\n     * that contains only PK field values.)\n     *\n     * @param modelDefinition The model definition to create a predicate for.\n     * @param model The model instance to extract value equalities from.\n     */\n    static createForPk(modelDefinition, model) {\n        const keyFields = (0, util_1.extractPrimaryKeyFieldNames)(modelDefinition);\n        const keyValues = (0, util_1.extractPrimaryKeyValues)(model, keyFields);\n        const predicate = this.createFromAST(modelDefinition, {\n            and: keyFields.map((field, idx) => {\n                const operand = keyValues[idx];\n                return { [field]: { eq: operand } };\n            }),\n        });\n        return predicate;\n    }\n    /**\n     * Searches a `Model` table for records matching the given equalities object.\n     *\n     * This only matches against fields given in the equalities object. No other\n     * fields are tested by the predicate.\n     *\n     * @param modelDefinition The model we need a predicate for.\n     * @param flatEqualities An object holding field equalities to search for.\n     */\n    static createFromFlatEqualities(modelDefinition, flatEqualities) {\n        const ast = {\n            and: Object.entries(flatEqualities).map(([k, v]) => ({ [k]: { eq: v } })),\n        };\n        return this.createFromAST(modelDefinition, ast);\n    }\n    /**\n     * Accepts a GraphQL style filter predicate tree and transforms it into an\n     * AST that can be used for a storage adapter predicate. Example input:\n     *\n     * ```js\n     * {\n     * \tand: [\n     * \t\t{ name: { eq: \"Bob Jones\" } },\n     * \t\t{ age: { between: [32, 64] } },\n     * \t\t{ not: {\n     * \t\t\tor: [\n     * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n     * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n     * \t\t\t]\n     * \t\t}}\n     * \t]\n     * }\n     * ```\n     *\n     * @param gql GraphQL style filter node.\n     */\n    static transformGraphQLFilterNodeToPredicateAST(gql) {\n        if (!isValid(gql)) {\n            throw new Error('Invalid GraphQL Condition or subtree: ' + JSON.stringify(gql));\n        }\n        if (isEmpty(gql)) {\n            return {\n                type: 'and',\n                predicates: [],\n            };\n        }\n        else if (isGroup(gql)) {\n            const groupkey = Object.keys(gql)[0];\n            const children = this.transformGraphQLFilterNodeToPredicateAST(gql[groupkey]);\n            return {\n                type: groupkey,\n                predicates: Array.isArray(children) ? children : [children],\n            };\n        }\n        else if (isComparison(gql)) {\n            const operatorKey = Object.keys(gql)[0];\n            return {\n                operator: operatorKey,\n                operand: gql[operatorKey],\n            };\n        }\n        else {\n            if (Array.isArray(gql)) {\n                return gql.map(o => this.transformGraphQLFilterNodeToPredicateAST(o));\n            }\n            else {\n                const fieldKey = Object.keys(gql)[0];\n                return {\n                    field: fieldKey,\n                    ...this.transformGraphQLFilterNodeToPredicateAST(gql[fieldKey]),\n                };\n            }\n        }\n    }\n    /**\n     * Accepts a GraphQL style filter predicate tree and transforms it into a predicate\n     * that storage adapters understand. Example input:\n     *\n     * ```js\n     * {\n     * \tand: [\n     * \t\t{ name: { eq: \"Bob Jones\" } },\n     * \t\t{ age: { between: [32, 64] } },\n     * \t\t{ not: {\n     * \t\t\tor: [\n     * \t\t\t\t{ favoriteFood: { eq: 'pizza' } },\n     * \t\t\t\t{ favoriteFood: { eq: 'tacos' } },\n     * \t\t\t]\n     * \t\t}}\n     * \t]\n     * }\n     * ```\n     *\n     * @param modelDefinition The model that the AST/predicate must be compatible with.\n     * @param ast The graphQL style AST that should specify conditions for `modelDefinition`.\n     */\n    static createFromAST(modelDefinition, ast) {\n        const key = {};\n        ModelPredicateCreator.predicateGroupsMap.set(key, this.transformGraphQLFilterNodeToPredicateAST(ast));\n        return key;\n    }\n}\nexports.ModelPredicateCreator = ModelPredicateCreator;\n/**\n * Map of storage predicates (key objects) to storage predicate AST's.\n */\nModelPredicateCreator.predicateGroupsMap = new WeakMap();\n"],"names":[],"mappings":"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"}
{"version":3,"file":"serviceError.js","sources":["../../../src/utils/serviceError.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseRestApiServiceError = void 0;\nconst aws_client_utils_1 = require(\"@aws-amplify/core/internals/aws-client-utils\");\nconst errors_1 = require(\"../errors\");\n/**\n * Parses both AWS and non-AWS error responses coming from the users' backend code.\n * * AWS errors generated by the AWS services(e.g. API Gateway, Bedrock). They can be Signature errors,\n *   ClockSkew errors, etc. These responses will be parsed to errors with proper name and message from the AWS\n *   services.\n * * non-AWS errors thrown by the user code. They can contain any headers or body. Users need to access the\n *   error.response to get the headers and body and parse them accordingly. The JS error name and message will\n *   be `UnknownError` and `Unknown error` respectively.\n */\nconst parseRestApiServiceError = async (response) => {\n    if (!response) {\n        // Response is not considered an error.\n        return;\n    }\n    const parsedAwsError = await (0, aws_client_utils_1.parseJsonError)(stubErrorResponse(response));\n    if (!parsedAwsError) {\n        // Response is not considered an error.\n    }\n    else {\n        const bodyText = await response.body?.text();\n        return buildRestApiError(parsedAwsError, {\n            statusCode: response.statusCode,\n            headers: response.headers,\n            body: bodyText,\n        });\n    }\n};\nexports.parseRestApiServiceError = parseRestApiServiceError;\n/**\n * The response object needs to be stub here because the parseAwsJsonError assumes the response body to be valid JSON.\n * Although this is true for AWS services, it is not true for responses from user's code. Once the response body is\n * unwrapped as JSON(and fail), it cannot be read as text again. Therefore, we need to stub the response body here to\n * make sure we can read the error response body as a JSON, and may fall back to read as text if it is not a valid JSON.\n */\nconst stubErrorResponse = (response) => {\n    let bodyTextPromise;\n    const bodyProxy = new Proxy(response.body, {\n        get(target, prop, receiver) {\n            if (prop === 'json') {\n                // For potential AWS errors, error parser will try to parse the body as JSON first.\n                return async () => {\n                    if (!bodyTextPromise) {\n                        bodyTextPromise = target.text();\n                    }\n                    try {\n                        return JSON.parse(await bodyTextPromise);\n                    }\n                    catch (error) {\n                        // If response body is not a valid JSON, we stub it to be an empty object and eventually parsed\n                        // as an unknown error\n                        return {};\n                    }\n                };\n            }\n            else if (prop === 'text') {\n                // For non-AWS errors, users can access the body as a string as a fallback.\n                return async () => {\n                    if (!bodyTextPromise) {\n                        bodyTextPromise = target.text();\n                    }\n                    return bodyTextPromise;\n                };\n            }\n            else {\n                return Reflect.get(target, prop, receiver);\n            }\n        },\n    });\n    const responseProxy = new Proxy(response, {\n        get(target, prop, receiver) {\n            if (prop === 'body') {\n                return bodyProxy;\n            }\n            else {\n                return Reflect.get(target, prop, receiver);\n            }\n        },\n    });\n    return responseProxy;\n};\n/**\n * Utility to create a new RestApiError from a service error.\n */\nconst buildRestApiError = (error, response) => {\n    const restApiError = new errors_1.RestApiError({\n        name: error?.name,\n        message: error.message,\n        underlyingError: error,\n        response,\n    });\n    // $metadata is only required for backwards compatibility.\n    return Object.assign(restApiError, { $metadata: error.$metadata });\n};\n"],"names":[],"mappings":"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"}
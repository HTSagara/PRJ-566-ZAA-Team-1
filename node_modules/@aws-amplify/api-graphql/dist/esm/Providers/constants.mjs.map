{"version":3,"file":"constants.mjs","sources":["../../../src/Providers/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport { AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nexport const MAX_DELAY_MS = 5000;\nexport const NON_RETRYABLE_CODES = [400, 401, 403];\nexport const CONNECTION_STATE_CHANGE = 'ConnectionStateChange';\nexport var MESSAGE_TYPES;\n(function (MESSAGE_TYPES) {\n    /**\n     * Client -> Server message.\n     * This message type is the first message after handshake and this will initialize AWS AppSync RealTime communication\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_INIT\"] = \"connection_init\";\n    /**\n     * Server -> Client message\n     * This message type is in case there is an issue with AWS AppSync RealTime when establishing connection\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ERROR\"] = \"connection_error\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_CONNECTION_INIT message\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_ACK\"] = \"connection_ack\";\n    /**\n     * Client -> Server message.\n     * This message type is for register subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_START\"] = \"start\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_START message\n     */\n    MESSAGE_TYPES[\"GQL_START_ACK\"] = \"start_ack\";\n    /**\n     * Server -> Client message.\n     * This message type is for subscription message from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_DATA\"] = \"data\";\n    /**\n     * Server -> Client message.\n     * This message type helps the client to know is still receiving messages from AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_CONNECTION_KEEP_ALIVE\"] = \"ka\";\n    /**\n     * Client -> Server message.\n     * This message type is for unregister subscriptions with AWS AppSync RealTime\n     */\n    MESSAGE_TYPES[\"GQL_STOP\"] = \"stop\";\n    /**\n     * Server -> Client message.\n     * This message type is for the ack response from AWS AppSync RealTime for GQL_STOP message\n     */\n    MESSAGE_TYPES[\"GQL_COMPLETE\"] = \"complete\";\n    /**\n     * Server -> Client message.\n     * This message type is for sending error messages from AWS AppSync RealTime to the client\n     */\n    MESSAGE_TYPES[\"GQL_ERROR\"] = \"error\";\n})(MESSAGE_TYPES || (MESSAGE_TYPES = {}));\nexport var SUBSCRIPTION_STATUS;\n(function (SUBSCRIPTION_STATUS) {\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"PENDING\"] = 0] = \"PENDING\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"CONNECTED\"] = 1] = \"CONNECTED\";\n    SUBSCRIPTION_STATUS[SUBSCRIPTION_STATUS[\"FAILED\"] = 2] = \"FAILED\";\n})(SUBSCRIPTION_STATUS || (SUBSCRIPTION_STATUS = {}));\nexport var SOCKET_STATUS;\n(function (SOCKET_STATUS) {\n    SOCKET_STATUS[SOCKET_STATUS[\"CLOSED\"] = 0] = \"CLOSED\";\n    SOCKET_STATUS[SOCKET_STATUS[\"READY\"] = 1] = \"READY\";\n    SOCKET_STATUS[SOCKET_STATUS[\"CONNECTING\"] = 2] = \"CONNECTING\";\n})(SOCKET_STATUS || (SOCKET_STATUS = {}));\nexport const AWS_APPSYNC_REALTIME_HEADERS = {\n    accept: 'application/json, text/javascript',\n    'content-encoding': 'amz-1.0',\n    'content-type': 'application/json; charset=UTF-8',\n};\n/**\n * Time in milleseconds to wait for GQL_CONNECTION_INIT message\n */\nexport const CONNECTION_INIT_TIMEOUT = 15000;\n/**\n * Time in milleseconds to wait for GQL_START_ACK message\n */\nexport const START_ACK_TIMEOUT = 15000;\n/**\n * Default Time in milleseconds to wait for GQL_CONNECTION_KEEP_ALIVE message\n */\nexport const DEFAULT_KEEP_ALIVE_TIMEOUT = 5 * 60 * 1000;\n/**\n * Default Time in milleseconds to alert for missed GQL_CONNECTION_KEEP_ALIVE message\n */\nexport const DEFAULT_KEEP_ALIVE_ALERT_TIMEOUT = 65 * 1000;\n/**\n * Default delay time in milleseconds between when reconnect is triggered vs when it is attempted\n */\nexport const RECONNECT_DELAY = 5 * 1000;\n/**\n * Default interval time in milleseconds between when reconnect is re-attempted\n */\nexport const RECONNECT_INTERVAL = 60 * 1000;\n"],"names":[],"mappings":";;AAAA;AACA;AAEY,MAAC,YAAY,GAAG,KAAK;AACrB,MAAC,mBAAmB,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AACvC,MAAC,uBAAuB,GAAG,wBAAwB;AACrD,IAAC,cAAc;AACzB,CAAC,UAAU,aAAa,EAAE;AAC1B;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,qBAAqB,CAAC,GAAG,iBAAiB,CAAC;AAC7D;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,sBAAsB,CAAC,GAAG,kBAAkB,CAAC;AAC/D;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,oBAAoB,CAAC,GAAG,gBAAgB,CAAC;AAC3D;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;AACzC;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,eAAe,CAAC,GAAG,WAAW,CAAC;AACjD;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;AACvC;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,2BAA2B,CAAC,GAAG,IAAI,CAAC;AACtD;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,UAAU,CAAC,GAAG,MAAM,CAAC;AACvC;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,cAAc,CAAC,GAAG,UAAU,CAAC;AAC/C;AACA;AACA;AACA;AACA,IAAI,aAAa,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC;AACzC,CAAC,EAAE,aAAa,KAAK,aAAa,GAAG,EAAE,CAAC,CAAC,CAAC;AAChC,IAAC,oBAAoB;AAC/B,CAAC,UAAU,mBAAmB,EAAE;AAChC,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,SAAS,CAAC;AACxE,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,GAAG,WAAW,CAAC;AAC5E,IAAI,mBAAmB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AACtE,CAAC,EAAE,mBAAmB,KAAK,mBAAmB,GAAG,EAAE,CAAC,CAAC,CAAC;AAC5C,IAAC,cAAc;AACzB,CAAC,UAAU,aAAa,EAAE;AAC1B,IAAI,aAAa,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;AAC1D,IAAI,aAAa,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC;AACxD,IAAI,aAAa,CAAC,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC;AAClE,CAAC,EAAE,aAAa,KAAK,aAAa,GAAG,EAAE,CAAC,CAAC,CAAC;AAC9B,MAAC,4BAA4B,GAAG;AAC5C,IAAI,MAAM,EAAE,mCAAmC;AAC/C,IAAI,kBAAkB,EAAE,SAAS;AACjC,IAAI,cAAc,EAAE,iCAAiC;AACrD,EAAE;AACF;AACA;AACA;AACY,MAAC,uBAAuB,GAAG,MAAM;AAC7C;AACA;AACA;AACY,MAAC,iBAAiB,GAAG,MAAM;AACvC;AACA;AACA;AACY,MAAC,0BAA0B,GAAG,CAAC,GAAG,EAAE,GAAG,KAAK;AACxD;AACA;AACA;AACY,MAAC,gCAAgC,GAAG,EAAE,GAAG,KAAK;AAC1D;AACA;AACA;AACY,MAAC,eAAe,GAAG,CAAC,GAAG,KAAK;AACxC;AACA;AACA;AACY,MAAC,kBAAkB,GAAG,EAAE,GAAG;;;;"}
import { Observable } from 'rxjs';
import { CustomUserAgentDetails, DocumentType, GraphQLAuthMode } from '@aws-amplify/core/internals/utils';
import { CustomHeaders } from '@aws-amplify/data-schema/runtime';
import { PubSubContentObserver } from '../../types/PubSub';
import { SUBSCRIPTION_STATUS } from '../constants';
type ResolvedGraphQLAuthModes = Exclude<GraphQLAuthMode, 'identityPool'>;
export interface ObserverQuery {
    observer: PubSubContentObserver;
    query: string;
    variables: Record<string, DocumentType>;
    subscriptionState: SUBSCRIPTION_STATUS;
    subscriptionReadyCallback?(): void;
    subscriptionFailedCallback?(reason?: any): void;
    startAckTimeoutId?: ReturnType<typeof setTimeout>;
}
export interface AWSAppSyncRealTimeProviderOptions {
    appSyncGraphqlEndpoint?: string;
    authenticationType?: ResolvedGraphQLAuthModes;
    query?: string;
    variables?: Record<string, DocumentType>;
    apiKey?: string;
    region?: string;
    libraryConfigHeaders?(): Promise<Record<string, unknown> | Headers>;
    additionalHeaders?: CustomHeaders;
    additionalCustomHeaders?: Record<string, string>;
    authToken?: string;
}
export declare class AWSAppSyncRealTimeProvider {
    private awsRealTimeSocket?;
    private socketStatus;
    private keepAliveTimeoutId?;
    private keepAliveTimeout;
    private keepAliveAlertTimeoutId?;
    private subscriptionObserverMap;
    private promiseArray;
    private connectionState;
    private readonly connectionStateMonitor;
    private readonly reconnectionMonitor;
    private connectionStateMonitorSubscription;
    constructor();
    /**
     * Mark the socket closed and release all active listeners
     */
    close(): void;
    getNewWebSocket(url: string, protocol: string[]): WebSocket;
    getProviderName(): string;
    private isCustomDomain;
    subscribe(options?: AWSAppSyncRealTimeProviderOptions, customUserAgentDetails?: CustomUserAgentDetails): Observable<Record<string, unknown>>;
    private _startSubscriptionWithAWSAppSyncRealTime;
    private _logStartSubscriptionError;
    private _waitForSubscriptionToBeConnected;
    private _sendUnsubscriptionMessage;
    private _removeSubscriptionObserver;
    private _closeSocketIfRequired;
    private _handleIncomingSubscriptionMessage;
    private _errorDisconnect;
    private _timeoutStartSubscriptionAck;
    /**
     * Strips out `Authorization` header if present
     */
    private _extractNonAuthHeaders;
    /**
     *
     * @param headers - http headers
     * @returns uri-encoded query parameters derived from custom headers
     */
    private _queryParamsFromCustomHeaders;
    /**
     * Normalizes AppSync realtime endpoint URL
     *
     * @param appSyncGraphqlEndpoint - AppSync endpointUri from config
     * @param urlParams - URLSearchParams
     * @returns fully resolved string realtime endpoint URL
     */
    private _realtimeUrlWithQueryString;
    private _initializeWebSocketConnection;
    private _initializeRetryableHandshake;
    /**
     *
     * @param subprotocol -
     */
    private _initializeHandshake;
    private _awsRealTimeHeaderBasedAuth;
    private _awsAuthTokenHeader;
    private _awsRealTimeApiKeyHeader;
    private _awsRealTimeIAMHeader;
    private _customAuthHeader;
}
export {};

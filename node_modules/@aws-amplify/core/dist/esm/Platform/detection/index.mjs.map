{"version":3,"file":"index.mjs","sources":["../../../../src/Platform/detection/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Framework } from '../types';\nimport { reactSSRDetect, reactWebDetect } from './React';\nimport { vueSSRDetect, vueWebDetect } from './Vue';\nimport { svelteSSRDetect, svelteWebDetect } from './Svelte';\nimport { nextSSRDetect, nextWebDetect } from './Next';\nimport { nuxtSSRDetect, nuxtWebDetect } from './Nuxt';\nimport { angularSSRDetect, angularWebDetect } from './Angular';\nimport { reactNativeDetect } from './ReactNative';\nimport { expoDetect } from './Expo';\nimport { webDetect } from './Web';\n// These are in the order of detection where when both are detectable, the early Framework will be reported\nconst detectionMap = [\n    // First, detect mobile\n    { platform: Framework.Expo, detectionMethod: expoDetect },\n    { platform: Framework.ReactNative, detectionMethod: reactNativeDetect },\n    // Next, detect web frameworks\n    { platform: Framework.NextJs, detectionMethod: nextWebDetect },\n    { platform: Framework.Nuxt, detectionMethod: nuxtWebDetect },\n    { platform: Framework.Angular, detectionMethod: angularWebDetect },\n    { platform: Framework.React, detectionMethod: reactWebDetect },\n    { platform: Framework.VueJs, detectionMethod: vueWebDetect },\n    { platform: Framework.Svelte, detectionMethod: svelteWebDetect },\n    { platform: Framework.WebUnknown, detectionMethod: webDetect },\n    // Last, detect ssr frameworks\n    { platform: Framework.NextJsSSR, detectionMethod: nextSSRDetect },\n    { platform: Framework.NuxtSSR, detectionMethod: nuxtSSRDetect },\n    { platform: Framework.ReactSSR, detectionMethod: reactSSRDetect },\n    { platform: Framework.VueJsSSR, detectionMethod: vueSSRDetect },\n    { platform: Framework.AngularSSR, detectionMethod: angularSSRDetect },\n    { platform: Framework.SvelteSSR, detectionMethod: svelteSSRDetect },\n];\nexport function detect() {\n    return (detectionMap.find(detectionEntry => detectionEntry.detectionMethod())\n        ?.platform || Framework.ServerSideUnknown);\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AAWA;AACA,MAAM,YAAY,GAAG;AACrB;AACA,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE,UAAU,EAAE;AAC7D,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,WAAW,EAAE,eAAe,EAAE,iBAAiB,EAAE;AAC3E;AACA,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,MAAM,EAAE,eAAe,EAAE,aAAa,EAAE;AAClE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE,aAAa,EAAE;AAChE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,gBAAgB,EAAE;AACtE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,eAAe,EAAE,cAAc,EAAE;AAClE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,KAAK,EAAE,eAAe,EAAE,YAAY,EAAE;AAChE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,MAAM,EAAE,eAAe,EAAE,eAAe,EAAE;AACpE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE;AAClE;AACA,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,SAAS,EAAE,eAAe,EAAE,aAAa,EAAE;AACrE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,OAAO,EAAE,eAAe,EAAE,aAAa,EAAE;AACnE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,eAAe,EAAE,cAAc,EAAE;AACrE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,QAAQ,EAAE,eAAe,EAAE,YAAY,EAAE;AACnE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,UAAU,EAAE,eAAe,EAAE,gBAAgB,EAAE;AACzE,IAAI,EAAE,QAAQ,EAAE,SAAS,CAAC,SAAS,EAAE,eAAe,EAAE,eAAe,EAAE;AACvE,CAAC,CAAC;AACK,SAAS,MAAM,GAAG;AACzB,IAAI,QAAQ,YAAY,CAAC,IAAI,CAAC,cAAc,IAAI,cAAc,CAAC,eAAe,EAAE,CAAC;AACjF,UAAU,QAAQ,IAAI,SAAS,CAAC,iBAAiB,EAAE;AACnD;;;;"}
{"version":3,"file":"getCanonicalRequest.mjs","sources":["../../../../../../../../src/clients/middleware/signing/signer/signatureV4/utils/getCanonicalRequest.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getCanonicalHeaders } from './getCanonicalHeaders';\nimport { getCanonicalQueryString } from './getCanonicalQueryString';\nimport { getCanonicalUri } from './getCanonicalUri';\nimport { getHashedPayload } from './getHashedPayload';\nimport { getSignedHeaders } from './getSignedHeaders';\n/**\n * Returns a canonical request.\n *\n * @param request `HttpRequest` from which to create the canonical request from.\n * @param uriEscapePath Whether to uri encode the path as part of canonical uri. It's used for S3 only where the\n *   pathname is already uri encoded, and the signing process is not expected to uri encode it again. Defaults to true.\n * @returns String created by by concatenating the following strings, separated by newline characters:\n * - HTTPMethod\n * - CanonicalUri\n * - CanonicalQueryString\n * - CanonicalHeaders\n * - SignedHeaders\n * - HashedPayload\n *\n * @internal\n */\nexport const getCanonicalRequest = ({ body, headers, method, url }, uriEscapePath = true) => [\n    method,\n    getCanonicalUri(url.pathname, uriEscapePath),\n    getCanonicalQueryString(url.searchParams),\n    getCanonicalHeaders(headers),\n    getSignedHeaders(headers),\n    getHashedPayload(body),\n].join('\\n');\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,mBAAmB,GAAG,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,aAAa,GAAG,IAAI,KAAK;AAC7F,IAAI,MAAM;AACV,IAAI,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,CAAC;AAChD,IAAI,uBAAuB,CAAC,GAAG,CAAC,YAAY,CAAC;AAC7C,IAAI,mBAAmB,CAAC,OAAO,CAAC;AAChC,IAAI,gBAAgB,CAAC,OAAO,CAAC;AAC7B,IAAI,gBAAgB,CAAC,IAAI,CAAC;AAC1B,CAAC,CAAC,IAAI,CAAC,IAAI;;;;"}
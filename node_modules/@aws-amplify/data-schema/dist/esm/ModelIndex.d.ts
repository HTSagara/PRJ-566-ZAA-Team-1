import { Brand } from './util';
declare const brandName = "modelIndexType";
export type ModelIndexData = {
    partitionKey: string;
    sortKeys: readonly unknown[];
    indexName: string;
    queryField: string;
};
export type InternalModelIndexType = ModelIndexType<any, any, any, any> & {
    data: ModelIndexData;
};
export type ModelIndexType<ModelFieldKeys extends string, PK, SK = readonly [], QueryField = never, K extends keyof ModelIndexType<any, any, any, any> = never> = Omit<{
    sortKeys<FieldKeys extends ModelFieldKeys = ModelFieldKeys, const SK extends ReadonlyArray<Exclude<FieldKeys, PK>> = readonly []>(sortKeys: SK): ModelIndexType<FieldKeys, PK, SK, QueryField, K | 'sortKeys'>;
    name(name: string): ModelIndexType<ModelFieldKeys, PK, SK, QueryField, K | 'name'>;
    queryField<QF extends string = never, MF extends ModelFieldKeys = ModelFieldKeys>(field: QF): ModelIndexType<MF, PK, SK, QF, K | 'queryField'>;
}, K> & Brand<typeof brandName>;
export declare function modelIndex<ModelFieldKeys extends string, PK extends ModelFieldKeys, SK = readonly [], QueryField = never>(partitionKeyFieldName: PK): ModelIndexType<ModelFieldKeys, PK, SK, QueryField, never>;
export {};
